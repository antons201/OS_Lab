1 задание: Вычисление контрольной суммы с использованием XOR. Пояснения даны в комментариях в коде. Для проверки
полученных результатов использовался калькулятор: https://www.scadacore.com/tools/programming-calculators/online-checksum-calculator/

2 задание: Вычисление контрольной сумммы Флетчера. Пояснения даны в комментариях в коде. Для проверки
полученных результатов использовался калькулятор: https://gchq.github.io/CyberChef/#recipe=Fletcher-16_Checksum

3 задание: Вычисление контрольной суммы с использованием циклического избыточного кода. Пояснения даны в комментариях в коде.
Для проверки полученных результатов использовался калькулятор: https://www.tahapaksu.com/crc/ (CRC-16 (Modbus))

4 задание: Время для файлов размерами: 5 байт, 448 байт, 31.1 Кб, 979.2 Кб

                     5 байт  448 байт  31.1 Кб  979.2 Кб
Время xor:           9 мс    14 мс     694 мс   22122 мс
Время fletcher:      9 мс    24 мс     893 мс   27423 мс
Время crc-16 modbus: 9 мс    14 мс     719 мс   23315 мс

Делаем вывод, что CRC-16 лучше. По времени он на втором месте, но не сильно отстает от xor. При этом гораздо надежнее него.

5 задание:
create-csum.c: Используя CRC-8 вычисляем контрольную сумму для блоков размером 4кб, записываем в файл.
check-csum.c   Используя CRC-8 вычисляем контрольную сумму для блоков размером 4кб, и сравниваем с записанными в файле.