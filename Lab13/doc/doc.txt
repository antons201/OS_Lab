Наивная реализация очереди имеет 2 проблемы:
1. Разные потоки могут обращатсья к next_in, next_out и array одновременно. Поэтому может возникнуть ситуация, когда,
например, в одну и ту же ячейку массива запись произойдет дважды, при этом функция инкремента также вызовется дважды.
Тогда возникнет ситуация, в которой одна из ячеек массива будет пропущена, что является некорректной работой программы.
2. Если мы хотим удалить элемент из пустой очереди, то программа завершится с ошибкой. Корректно работающая программа должна
ждать до тех пор, пока в очереди не появится элемент и после этого его удалить. Аналогично с полной очередью.

Первая проблема решается с помощью мьютексов, вторая - с помощью условных переменных. Мы имеем три программы. Одна с наивной
реализацией, вторая с мьютексом, третья - с мьютексом и условной переменной.

Протестируем эти программы и проверим, что действительно данные проблемы существуют и решаются описанными способами.

Сделаем три теста. Первый тест будет проверять потокобезопасность, т.е. существование/решение первой проблемы. Для этого
мы заполним элементы массива, в который записываюстя элементы очереди, нулями. Далее в двух потоках будем пушить туда 1 и 2
соответственно. В итоге у нас только 1 элемент должен остаться равным 0(из-за рализации очереди). Для того, чтобы проблема
дествительно возникла, увеличим размер очереди, сделаем его, например, равным 1600000. В наивной реализации программа упадет,
в остальных первый тест будет пройден. Значит, проблема действительн очуществует и решается описанным способом.

Второй и третий тесты будут проверять наличие и решение второй проблемы. Второй тест проверяет удаление из пустой очереди.
Для этого в одном потоке делаем поп, а в другом усыпляем программу на секнду и только потом делаем пуш. Этим мы гарантируем,
что функция добавления в очередь вызовется позже, чем функция удаления.
Третий тест проверяет добавление в полную очередь. В одном из потоков добавим в очередь на 1 элемент больше, чем можно.
Во втором усыпим программу на секунду и после сделаем поп. Т.е. гарантируем, что удаление из очереди вызовется позже, чем
добавление всех элементов.
В наивной реализации и реализации только с использованием мьютексов программа упадет, в реализации с использованием условных
переменных проблем не возникает. Значит, действительно существует втоаря проблема и мы её решаем, использовав условные
переменные.