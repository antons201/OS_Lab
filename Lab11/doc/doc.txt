1. Аргументы: -n 2 -l 1 -v
В функции worker нет блокировок, поэтому не определено для какого из потоков функция печати вызовется сначала.
Функция печати вызывается дважды (до и после вызова функции vector_add()) для каждого из потоков. Следовательно порядок
печати результатов не постоянный, а может меняться при каждом запуске.

Аргументы: -n 2 -l 5000 -v -d
Увеличим число сложений. Взаимная блокировка может иногда возникать (в функции vector_add()).
(Чем больше сложений, тем вероятнее).

Аргументы: -n 20 -l 5000 -v -d
Взаимная блокировка также может возникать. Единственный случай, когда её можно избежать - использовать один поток.

2. Программа избегает взаимных блокировок за счет сравнения указателей на складываемые векторы. От этой проверки будет
зависеть порядок блокировки => не будет возникать проблемных ситуаций.

Специальный случай необходим, если исходный и результирующий вектор совпадают, т.к. в таком случае необходимо блокировку
сделать только один раз, иначе произойдет взаимоблокировка.

Аргументы: -t -n 2 -l 100000 -d
Чем больше число сложений и число потоков, тем больше время.

Аргументы: -t -n 2 -l 100000 -d -p
С флагом -p повышается производительность(т.е. время работы уменьшается) за счет включения флага параллельности.

3. Первый вызов pthread_mutex_trylock() необходим (для блокировки v_dst).

Проверим как меняется число повторных попыток с ростом количества потоков c шагом 2.

1 поток: 0
3 потока: 1224020
5 потоков: 2971812
7 потоков: 6700292
9 потоков: 13061970
11 потоков: 20571759

Видим, что чем больше потоков, тем большее число повторных попыток совершается.

4. В данном способе используется глобальная блокировка для избежания возможной взаимной блокировки. Минус данного подхода
заключается в том, что глобальная блокировка используется даже тогда, когда не нужна (в слечае, когда векторы в каждом
потоке различны).

При использовании флага параллельности -p производительность повышается. Пример, при 100000 сложениях:
Время без флага: 0.82 seconds
С флагом: 0.09 seconds

5. Данный способ будет атомарным только для сложения пары элементов, но не всего вектора целиком. Он работает достаточно
быстро, но медленнее, чем, например, vector-global-order(как с флагом -p, так и без него). С флагом -p производительность
метода улучшается.

Примеры замеров времени для 100 000 сложений и 2 потоков:

                            Бег флага -p   С флагом -p
vector-global-order:        0.32 seconds   0.07 seconds
vector-try-wait:            0.45 seconds   0.07 seconds
vector-avoid-hold-and-wait: 0.93 seconds   0.08 seconds
vector-nolock:              0.39 seconds   0.15 seconds