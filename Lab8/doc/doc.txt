Создаем сервер и клиент.
В клиенте создаем соккет и пытаемся сконнектиться с сервером. Если все удачно, то просми у пользователя имя файла,
содержимое которого хотим получить. Далее отправляем его на сервер и ждём ответ.
На сервере создаем соккет, биндим его, и слушаем клиент. Далее в бесконечном цикле с использованием select обрабатываем
запросы сразу с нескольких клиентов. Также получаем/отправляем данные.
Для асинхронной работы будет использовать неблокирующие соккеты. Их отличие в том, что если мы используем обычные соккеты,
то на время выполнения операции с ними программа блокировалась. Используя функцию fcntl сделаем соккеты неблокирующими.
Вызов любой функции с таким сокетом будет возвращать управление немедленно.
Для обработки сигналов будем использовать системный вызов signal. Напишем его в самом начале нашей программы, чтобы в
любой момент работы сервера ловить сигналы. Укажем для примера сигнал SIGSEGV(можно любой другой) и создадим функцию print,
которая будет вызываться при появлении этого сигнала. Она будет нам сообщать, что сигнал пойман.

Существуют и другие подходы для создания сервера с циклом ожидания событий. Например, с использованием fork. Этот способ
подразумевает создание дочернего процесса для обслуживания каждого нового клиента. При этом родительский процесс занимается
только прослушиванием порта и приёмом соединений. Но у такого подхода есть достаточно минусов.  Во-первых, если клиентов
очень много, создание нового процесса для обслуживания каждого из них может оказаться слишком дорогостоящей операцией.
Во-вторых, такой способ неявно подразумевает, что все клиенты обслуживаются независимо друг от друга.
Для решения этих проблем мы можем использовать select. Его плюсы заключаются в том, что мы решаем проблемы описанные выше.
Минусы заключаются в том, что программы получаются более сложны по сравнению с первым способом, а также программа вынуждена
отслеживать дескрипторы всех клиентов и работать с ними параллельно и каждый раз мы должны будем в цикле проверять дескрипторы всех
соккетов и проверять, произошло ли какое-то событие.